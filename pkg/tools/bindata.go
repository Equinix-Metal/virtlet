// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdf\x6f\xdb\x38\xf2\x7f\xcf\x5f\x31\x68\x80\x6f\xb7\xc0\x57\x71\x52\xdc\x5e\xbb\xc6\xdd\x43\x1a\x7b\xb3\x46\x93\xd8\x70\xd2\x74\xdf\x0c\x9a\x1a\x4b\x5c\x53\xa4\x96\xa4\x94\xf8\xfe\xfa\x03\x49\x49\xd1\x2f\x3b\x4e\x9a\x04\xbd\xbc\xd4\x25\x39\xc3\x99\xe1\xfc\xf8\x0c\xc5\x20\x08\x0e\x48\xca\x6e\x51\x69\x26\xc5\x10\x48\x9a\xea\x41\x7e\x72\xb0\x66\x22\x1c\xc2\x88\x60\x22\xc5\x35\x9a\x83\x04\x0d\x09\x89\x21\xc3\x03\x00\x41\x12\x1c\x42\xce\x94\xe1\x68\x8a\xff\xeb\x94\x50\x1c\xc2\x3a\x5b\x62\xa0\x37\xda\x60\x72\xa0\x53\xa4\x76\xb9\x46\x8e\xd4\x48\x65\x7f\x03\x24\xc4\xd0\xf8\x82\x2c\x91\x6b\x3f\x00\xa0\x32\x61\x58\x93\xa5\xc1\x24\xe5\xc4\x60\x41\x53\xdb\xdc\xfe\xb5\x05\xb0\x7f\xbc\xc1\xb2\x97\x29\x40\x29\x92\xfd\x8b\xa5\x36\x57\x68\xee\xa4\x5a\x0f\xc1\xa8\x0c\x8b\xf1\x50\xe8\x99\xe4\x8c\x6e\x86\x70\xc6\x33\x6d\x50\xfd\xce\x94\x36\xdf\x99\x89\xff\xf0\x24\xc5\xc2\x43\xc7\x62\x36\x19\x01\xd3\x8e\x01\x18\x09\xbf\x9c\x7c\x00\x14\x64\xc9\x11\x6e\x2f\xb5\x1d\xd1\x99\xca\x59\x8e\xa5\x1c\x40\xa5\x30\x84\x09\x54\xa0\x50\x1b\xa2\x1e\xd8\xfd\x62\x24\x2c\x11\x68\x8c\x74\x8d\xe1\x07\x20\x22\x84\x5f\x3e\x7e\xb0\x4c\x0a\x96\x26\x46\xc8\x34\x82\x5c\x81\xd0\x28\x0c\x2a\x60\x02\x98\x60\x35\xb6\x35\xf5\x66\x93\x51\x43\xb5\x43\x58\x4a\x69\xb4\x51\x24\x85\x54\x49\x8a\x61\xa6\x10\x04\x62\xe8\x24\xa5\x0a\x89\x41\x20\x96\xd7\x8a\x45\x09\x49\x2d\xf7\xda\x91\x3e\x9c\x74\xc1\x50\xa3\xca\x19\xc5\x53\x4a\x65\x26\xcc\x55\xe3\x58\xaa\x3d\xa5\xe0\x1b\x7b\x1c\x70\x5b\x58\x20\x95\xa1\x06\x29\x9c\x36\x42\x86\xa8\xe1\x8e\x99\x18\xf0\xde\x28\x32\xf7\xc7\xf6\xef\xd2\x5a\xee\x58\x0b\x56\x64\xb5\xb2\xaa\x6e\x1e\x0e\xd9\x52\x9f\x76\x46\x01\x14\xfe\x9d\x31\x85\xe1\x28\x53\x4c\x44\xd7\x34\xc6\x30\xe3\x4c\x44\x93\x48\xc8\x6a\x78\x7c\x8f\x34\x33\xd6\xeb\x6b\x94\x9e\xe7\x75\xe1\xb2\x37\xa8\x12\xdd\x9c\x0e\xbc\x07\x8f\xef\x53\x85\xda\xc6\x4c\x6b\xde\xae\x58\xe3\x66\xd8\x50\xa7\xb5\x02\x40\xa6\xa8\x88\x8d\x09\x98\x88\xce\x64\x4e\x78\x86\x1d\xb6\x96\x71\xcb\xb6\x56\xef\xb3\xf2\xdc\x2b\x82\x43\xb8\x89\xb1\xe5\x14\x40\x65\xca\x50\x97\x0c\xde\x6b\x58\x71\xbc\xcf\x25\xcf\x12\x84\x50\xb1\xbc\xf2\x9b\x43\xeb\x09\xf6\x64\x42\x5c\x91\x8c\x1b\x77\xfe\xee\xd4\x78\x16\x31\x01\x21\x53\xce\x31\x51\xe8\x4c\xa1\x06\x13\x93\x07\x0f\x76\x74\x4c\x39\xdb\xd9\xed\xac\x6b\x61\x08\xcb\x0d\x70\xb6\xb4\x7b\xc3\xff\x55\x71\x80\xf7\x4c\x9b\xd2\x0d\xac\xb7\x1e\x94\x5a\xfa\xf0\x4e\x15\xa6\x44\x61\x60\xcf\xa3\x32\x05\x4b\x48\x84\x43\x48\x98\x22\xc2\x30\x3d\x68\xe6\x80\x62\x7e\x96\x71\x5e\x86\xf0\x64\x75\x25\xcd\x4c\xa1\x8d\x96\x6a\x15\x95\x49\x42\x44\xf8\x60\xe1\x00\x06\xf5\xed\x8e\x74\x5c\x4d\x79\x1b\x5d\x5a\xff\xd6\x75\x02\x2f\xe4\xfa\xb3\x0e\x1e\x2c\x19\x78\x1b\xe9\x20\x64\xaa\x76\x7a\x89\x25\x9e\x11\x13\x0f\x61\x50\x58\x33\x68\x12\x74\xf8\xaa\xac\xee\x16\x87\x30\x92\xe2\xbd\x01\x12\x86\xf0\xce\x73\x53\x32\x25\x11\x71\xde\x0b\x5f\x98\xb7\x39\x93\x82\xf0\x77\xff\x0f\xcc\xc0\x1d\xe3\x1c\x38\xa1\x6b\xbf\x39\xa0\x30\x6a\xb3\x45\xa4\xfa\x5e\xe5\xfe\xa1\xa4\x6b\x54\x5a\xd2\xf5\x16\xa2\x9c\x28\x4b\x38\xf0\x0b\x8f\x1a\x2b\x4b\x26\x5c\x46\x5b\xa8\xed\x71\xd7\x67\x0f\x61\x25\x95\x77\x29\x26\x22\xe7\x53\x7e\x0b\xce\x96\x83\xc2\x75\x06\xee\x6c\xb5\xf7\x1b\x97\x3f\x1a\x9e\x51\x6e\x9a\x13\x15\x70\xb6\xdc\xb1\x71\xd0\x5e\x52\x29\x8d\xf9\x16\xb2\xfa\x4c\xd0\xb1\x83\x15\xb2\xed\x88\xfd\x45\xca\x66\x4c\x9a\x29\x66\x36\x36\x6c\xf1\xde\xd4\x83\x3c\x55\x2c\x67\x1c\x23\x0c\x1b\x49\x1b\x00\x45\xde\xf5\xbc\xaf\xdf\xbe\x8c\x17\x57\xd3\xd1\x78\x71\x75\x7a\x39\xae\xb1\x71\xd9\xe3\x77\x25\x93\x66\x02\x59\x31\xe4\xe1\x1c\x57\xed\xb4\x52\x2f\xfe\xf9\x49\x6b\xd2\x11\x79\x4d\x6d\xe9\x3c\xb2\x16\xb7\x59\xbe\x23\xcd\xed\x64\x7e\x73\x31\xbe\x59\x8c\x26\xd7\xa7\x5f\x2e\xc6\x8b\xaf\xb7\x97\x8f\x8b\xe4\xcb\xcc\x25\x49\xbf\xe2\xa6\x47\xb2\x86\x01\x03\xbf\xb8\xb5\xc4\x25\xda\x90\x69\x5b\x1c\x17\xeb\x3c\x69\x4d\xcb\xd4\xc7\x44\xcb\x9e\x6d\xa1\xaf\xe7\x93\xe9\xed\xe2\xfa\xdb\x6c\x36\x9d\xdf\xbc\x99\xd8\x5a\x31\x99\x2f\x74\x96\xa6\x52\x99\xe7\x09\x3e\x9a\x7e\xbf\xba\x98\x9e\x8e\x16\xb3\xf9\xf4\x66\x7a\x36\xbd\x78\x3b\x9b\xcb\x3b\xc1\x25\x09\x17\xa9\x92\x46\x52\xc9\x9f\xa7\xc0\xc5\xf4\xfc\x62\x7c\x3b\x7e\x3b\xb9\xb9\x8c\x38\xe6\xf8\x44\x71\x27\x97\xa7\xe7\xe3\xc5\x7c\x7c\x3e\xfe\x73\xb6\xb8\x99\x9f\x5e\x5d\x5f\x9c\xde\x4c\xa6\x57\x6f\x26\xb6\x4b\x7d\x0b\x85\x11\xde\xa7\x0b\xa3\x88\xd0\xdc\xe5\xfe\xe7\x59\x7d\x7e\xfa\x7d\x31\x1a\xdf\x4e\xce\xc6\xd7\x6f\xa6\x81\x22\x77\x8b\x10\x2d\x58\xd4\xcf\xf4\xf5\x22\xb3\x5c\x4c\xcf\xcf\x27\x57\xe7\x6f\x9e\x5d\xb8\x8c\x22\x26\xda\x4b\xf6\x14\xfe\x6c\xf6\x6d\x71\x39\x1d\xbd\xa1\xa3\xd3\x34\x0b\x12\x19\x3e\xd5\xd3\x6d\x55\x71\x2e\x32\x9d\x5a\x93\xcf\xdf\x4c\xde\x02\x17\x2d\x94\x94\x66\xd1\x84\x4f\x4f\xb0\xb3\x0f\xd4\x5a\x84\x5e\xf7\x29\x31\x84\x01\x1a\x5a\x96\xec\x02\x57\x94\x98\x9a\x76\xf0\x74\x05\x67\x3c\x0e\xd9\x1b\x8b\x1e\xc2\x44\x00\x25\x1a\xe1\xce\xc2\xf1\xbf\x90\x1a\xe0\x92\x12\x5e\x41\x60\xc7\xc1\xce\xde\x11\x61\x2c\xee\xb6\xbd\x1d\x33\x20\xa4\x01\xb9\x5a\x31\xca\x08\xe7\x1b\x20\x39\x61\xdc\xf5\x7f\x52\xe0\x0b\x40\xdd\x42\x91\x7d\x50\x6e\x1d\xea\x58\x9b\x95\x58\xec\x6f\x4c\xb2\x0e\xd6\x69\x0c\x36\x69\xf5\x46\x0f\x56\x7a\x40\x23\x25\xb3\xb4\x43\xd8\x1a\x6e\x92\x5a\x74\x95\xc8\x30\xe3\x8d\xcc\xe1\x09\xbb\xe3\x0a\x49\x38\x15\x7c\xd3\x71\x94\x3a\x4b\xdb\x05\x77\x78\xb5\x06\xf7\x62\xf4\xda\x30\xbd\xdb\x0c\xfc\x18\xfa\xec\xa7\x6e\x3b\x36\x6c\x71\xf8\x2e\xb5\xed\x00\x1e\xa1\x0e\x6c\x6b\x80\x46\xd7\xc2\xc2\x36\x7c\x5c\x46\xae\x95\x64\x55\x93\x18\xa3\x42\x58\x22\x25\xee\x82\xc3\xc4\xa8\xee\x98\xc6\xaa\x71\x74\xa6\x4a\x95\x0c\x33\x8a\x80\x4a\x49\x55\x67\xc9\xd9\x1a\xc1\xc4\xac\xe6\xbc\x87\xf0\xad\xb8\x34\x91\xb6\x97\x0c\x8a\xdb\x0d\x1a\x13\x15\x62\x0e\x2b\xc6\x11\xde\x7b\x1b\xc8\x68\x90\x27\x7a\x40\x56\xe1\xa7\x5f\x97\xcb\x65\xf0\x19\x7f\xfb\x14\x9c\x9c\xe0\xa7\xe0\xb7\x5f\xff\x79\x12\x1c\x7f\xfc\xc7\xc7\x63\x42\x8f\x8f\x8f\x8f\x3f\x0e\x28\x53\x4a\xea\x20\x4f\x16\xc7\x47\x5c\x46\xef\x87\x70\x25\x41\x67\x34\xf6\x1c\xa5\xaa\x1a\xe0\x4d\xb7\x37\x49\x74\xb0\xbd\x29\xaa\x89\xd2\x6d\xa5\x0a\x63\x3e\x4e\xdd\x3d\xb4\xa7\x34\x37\xcf\x69\x4f\x6c\xa4\x30\x81\x5a\xcf\x94\x5c\x62\x9d\x04\xef\x1f\xae\xdb\xfc\x5f\x27\x1d\x79\x11\x07\x4b\x26\x06\xb5\x74\xe4\x47\x03\xda\x1a\xd0\x92\x12\x03\x01\x7c\xbb\x9a\xfc\x39\x6c\x3b\xe0\xa0\xee\x70\x81\x92\xf0\x2f\xab\xd9\x40\x64\x9c\xb7\x12\x79\xef\xa5\xc1\xcf\x9e\xc8\x5f\x3b\x43\xbf\x7d\x2a\x3b\xf4\x89\xd8\xdd\x26\xd5\xb3\x3c\x10\x85\xd5\x0d\x1e\x2c\x37\xa0\xb3\x14\x55\xc2\xb6\x25\xc1\x9f\xad\x40\xbc\xdd\x65\x42\xc9\x77\xeb\xd1\xfc\x54\x89\xbf\xc9\x25\xd3\x4e\x06\x9b\x22\xdc\xa5\x98\x12\x68\x50\x57\xf7\x63\xc5\xc5\xd8\xc0\xbb\xfd\xc0\x2e\xeb\x6c\xb4\xc7\xe5\x5b\xbf\xde\xc5\x26\x83\x54\x86\x5d\x97\xb1\x5c\xed\x44\xef\x25\xde\x3e\x96\x7e\x7e\xae\x6f\xc7\x72\x0b\xa1\xb6\x25\x75\xc3\x81\xfd\x1d\xd4\x7a\xc2\x6e\xf1\x70\xda\x3c\x2e\x4b\xc3\x1a\x87\x65\x59\x5e\xb9\x8a\x46\x22\x21\xb5\x61\x14\xd2\x4c\xa5\x52\xe3\x6b\x54\x28\x81\x66\xe7\xd5\x69\xe9\x77\x6e\xdd\x0f\x9c\x4c\x07\x84\x3e\x0e\x54\x7f\xee\xb2\x18\xa9\x94\x2e\x62\x24\xdc\xc4\x8b\xd4\x6e\x06\x01\x09\x43\x55\x94\x49\x6b\xb2\xc2\x91\xea\xd7\xb4\x35\x3f\xdd\xbb\x10\x3e\xbf\xe5\xc8\x13\xfd\xd4\x76\xe3\x25\x92\xe1\x1f\x52\x9b\x1b\x79\xd6\xfa\x34\xf6\xe3\xe9\xf0\x65\x42\xfc\x65\xd3\xd1\x76\x5d\x9f\x56\x90\xb6\x15\xce\xdd\x25\xd7\x9f\x68\xed\x1b\x94\xe5\x5a\x43\xf7\x36\x8d\xc4\x52\x1b\x50\xe4\x0e\xfc\x45\x10\x10\x4a\x51\xeb\xca\x1f\xdd\x17\x4b\xcb\xbf\x1e\x5d\x5d\x09\xdb\xda\xec\x24\xec\x0f\xe7\x9e\x3c\xb0\x93\x4b\x1f\xc2\xe8\x33\xd3\x4e\x26\x0d\xf8\xd0\x41\x14\x3b\x49\xeb\xa8\xa9\x8d\xa3\x0e\xe1\x66\x3a\x9a\x0e\x21\x74\x78\xcd\x36\x37\x54\x86\x58\x7c\xc0\x01\x5f\x83\x1d\x5a\xb5\x5e\xe2\x9a\xac\x07\xc2\x98\x69\x8f\xdb\x0a\xb4\x05\x67\xf3\x89\xed\xb1\xee\x37\xc0\x84\x36\x84\xfb\x8a\x62\x01\x6d\x7d\x43\x26\xfc\x51\x7a\xa0\x57\x7d\x13\x3e\xda\x47\x95\x5d\xdf\x8d\xb6\x7c\x7a\x7a\x94\x5f\x5f\x96\xe8\xcb\x11\x7b\x31\x6a\x07\x7b\x5f\x0a\x78\x9c\x51\x2d\x2b\xb4\xbf\x85\xed\x24\xfe\x01\x54\xb4\x27\x26\xda\xcb\x08\xbd\x19\x69\x6b\x3e\xda\x87\x65\xfb\x60\x1a\x9f\xe0\xf6\xb1\x67\x05\x86\xea\xf9\xb4\x2f\x0f\xef\xc5\x6c\xe7\x29\x3f\x85\x59\x1f\x10\xde\x05\x83\xf7\x92\xae\xc7\xec\x2d\x0c\xb7\x97\x5c\x4d\xa0\xd4\x0f\xb2\x76\x32\xda\xda\x4f\x76\xba\xc9\xe0\xe1\x1e\x78\xb8\xad\x52\x07\x1e\xaf\xf6\x42\xd5\xdd\x80\xb6\xfd\x48\x49\x2d\x09\x3d\x22\x99\x89\xa5\x62\xff\x71\x6b\x8e\xd6\x9f\xf5\x11\x93\x83\xfc\x64\x89\x86\x94\xcf\x97\x8a\xf7\x3b\x73\xc9\xf1\x0b\x13\x21\x13\xd1\x8e\x77\x4c\x4a\x72\x2c\x2e\xb0\x49\xca\xce\x6d\x6d\xd8\xb1\xd3\x01\x40\x67\x8f\x0e\x4b\x9d\x2d\xff\x42\x6a\x21\x4e\x50\xac\xbe\x6e\x3c\x98\xd9\xff\x2d\x95\xb5\x40\x77\xbf\xa7\xd9\xe4\x19\x4f\xb8\x94\x2d\x6e\x76\x7d\x50\xd9\xa4\x28\xf1\x01\xbc\x7b\xe7\x7e\x28\xd4\x32\x53\x14\xab\xf1\xea\xf1\x90\x2e\x06\xdc\x13\x1f\xf7\x3b\x47\xb5\x7c\x58\xe7\xee\xe3\x8a\xff\x44\x68\x5e\xe2\x94\x7b\x74\xac\xc4\x09\x2c\x20\x47\x55\xea\xd4\xd2\xa8\xd0\xa7\xa1\x4d\x4b\x97\x4a\x7a\x2f\xae\xfd\x97\x33\xed\x7f\xdc\x11\x43\xe3\x57\xd2\xa0\x0c\x9f\x4c\xa3\xb2\x33\x3f\xac\x48\x60\xfb\x19\xe5\x73\x52\x4b\xa9\x57\x8d\xb4\xb2\x8a\x59\x87\x08\x96\xc5\xb2\x17\x0c\xbb\xce\x51\xd7\xe3\xef\x29\xcc\xcf\x0b\x60\xe8\xd9\xfa\x58\x18\x7a\x37\x7e\xdd\x54\x94\x3c\x1c\xf2\x2b\xd8\x67\x9b\x23\xfd\x8f\xa4\xa9\x80\xaa\x70\xbb\xd3\x93\x94\xe1\xbd\x41\xe1\x9e\xe4\x15\x3c\xfb\x02\x21\xd3\x46\x26\xe5\x60\x88\xee\xed\x60\x51\x8a\x6a\xb1\x50\x24\xa7\xee\x36\x65\x27\xbd\xfe\xac\x7b\xb8\x17\xb3\xae\x8e\x25\x24\x4d\x99\x88\x74\x7d\xa2\xf2\xd0\x72\xa6\xb6\x65\x95\x4b\x5e\x3d\x0e\x1b\xf6\x7c\x79\xf7\xb2\x6c\x5f\xd6\xa5\x5a\x6f\x94\x7a\x19\x3e\xa3\xba\xfd\x37\x00\x00\xff\xff\x5b\x6c\xa5\x0e\xfc\x2c\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 11516, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
